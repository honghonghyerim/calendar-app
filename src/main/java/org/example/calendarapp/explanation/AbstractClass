

    AbstractEvent 를 추상클래스로 만든이유


    우선추상클래스는 직접  객체를 만들수없음
    다른 클래스가 상속해서 구체적으로 구현해야함

    공통 틀은 같지만, 세부 내용은 다를 때
    예를 들어 이벤트(Event) 라는 개념을 생각해볼게요.
    모든 이벤트에는 id, title, startAt, endAt 같은 공통 속성이 있어요.
    근데 “회의(Meeting)”와 “세미나(Seminar)” 같은 건 처리 방식이 달라요.
    그래서 공통 부분은 추상 클래스에서 정의, 세부 동작은 자식 클래스가 구체적으로 구현하도록 하는 거예요.


    객체 직접 만들면 안 될 때
    AbstractEvent 자체로는 아무 의미가 없죠.  --> 어떤이벤트인지 모르기때문에
    “회의”도 아니고, “세미나”도 아닌 그냥 “이벤트” 객체는 쓰면 안 돼요. --> 이런 구체적인 상황의 이벤트에서만 사용하기위해서
    근데 일반 클래스라면 new AbstractEvent() 해서 만들어버릴 수도 있죠.
    그래서 추상 클래스로 만들어서 직접 객체 생성 못 하게 막는 것이에요.




    인터페이스 + 클래스 장점 같이 쓰려고
    인터페이스(Event)만 쓰면 메서드 시그니처(껍데기) 만 정의 가능
    추상 클래스는 멤버 변수, 공통 메서드(기본 구현) 까지 넣을 수 있음
    그래서
    Event 인터페이스: “이런 기능 있어야 돼!”
    AbstractEvent: “공통 기능은 내가 미리 구현해놨어”
    자식 클래스: “세부적인 건 내가 구현할게”

    한 줄 요약:
    추상 클래스 = 객체 직접 못 만들게 막고, 공통 기능은 미리 제공하면서, 자식 클래스에게 구체 구현을 강제하는 틀
